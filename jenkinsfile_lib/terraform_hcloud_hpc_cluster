#!/usr/bin/env groovy

/* import shared library */
@Library('jenkins-dsl')_

pipeline {
  options { buildDiscarder(logRotator(numToKeepStr: '5')) }
  agent {
    kubernetes {
      yaml """
       apiVersion: v1
       kind: Pod
       metadata:
        labels:
            jenkins: build
       spec:
        containers:
        - name: terraform
          image: calmmopey/worker-arm-buster
          command:
          - cat
          tty: true
          env:
          - name: GOOGLE_APPLICATION_CREDENTIALS 
            value: /jenkins/jenkins-test-project.json 
          volumeMounts: 
          - name: jenkins-serviceaccount
            mountPath: "/jenkins" 
            readOnly: true
        - name: ansible
          image: calmmopey/worker-arm-buster
          command:
          - cat
          tty: true
          env:
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /jenkins/jenkins-test-project.json
          volumeMounts:
          - name: jenkins-serviceaccount
            mountPath: "/jenkins"
            readOnly: true
        volumes:
        - name: jenkins-serviceaccount
          secret:
            secretName: jenkins-serviceaccount
  """

    }
  }

parameters {
    string(name: 'NETWORK_ID', defaultValue: '823122', description: 'The ID of the internal network')
    string(name: 'MANAGER_TYPE', defaultValue: 'cx11', description: 'The hcloud server type to apply to the manager node')
    string(name: 'WORKER_TYPE', defaultValue: 'cx11', description: 'The hcloud server type to apply to the worker node(s)')
    string(name: 'LOCATION', defaultValue: 'nbg1', description: 'The data centre where the VM will be located')
    string(name: 'SUBNET_RANGE', defaultValue: '10.0.0.0/24', description: 'The subnet range')
    string(name: 'WORKER_NODES', defaultValue: '2', description: 'The number of workers')
    choice(name: 'SNAPSHOT_TAG', choices: ['hpc-image-template', 'hpc-image-centos-template'], description: 'The snapshot tag')
  }

  stages {
    stage ('Get secrets') {
    steps {
      container('terraform') {
             git branch: "main",
             credentialsId: "github",
             url: "git@github.com:andycockers/ansible-vault.git"
             withCredentials([string(credentialsId: 'ansible-vault', variable: 'VAULT')]) {
      sh """
      ansible-vault view --vault-password-file=$VAULT github/github > github
      cat github
      """
    }
    }
    }
    }
    stage('Terraform Create HPC Manager') {
      
      steps {
        container('terraform') {
              git branch: "master",
              credentialsId: "github",
              url: "https://github.com/andycockers/kubernetes"
              withCredentials([string(credentialsId: 'hetzner', variable: 'hcloud_token')]) {
            sh "cd terraform/hetzner-hpc-manager && terraform init -var='hcloud_token=$hcloud_token'"
            sh "cd terraform/hetzner-hpc-manager && terraform apply --auto-approve -var='hcloud_token=$hcloud_token'  -var='location=$LOCATION' -var='network_id=$NETWORK_ID' -var='server_type=$MANAGER_TYPE' -var='type=type=$SNAPSHOT_TAG'"
            sh "cd terraform/hetzner-hpc-manager && echo -n SERVER= > ipv4_address.txt && terraform output ipv4_address >> ipv4_address.txt"
            sh "cd terraform/hetzner-hpc-manager && echo -n SERVER_ID= > server_id.txt && terraform output id >> server_id.txt"
        script {
            def server = readProperties file: 'terraform/hetzner-hpc-manager/ipv4_address.txt'
            env.SERVER = server.SERVER
        }
        script {
            def server_id = readProperties file: 'terraform/hetzner-hpc-manager/server_id.txt'
            env.SERVER_ID = server_id.SERVER_ID
        }
          }
        }
            }
}

stage('Terraform Get the Manager node internal IP') {
      
      steps {
        container('terraform') {
              git branch: "master",
              credentialsId: "github",
              url: "https://github.com/andycockers/kubernetes"
              withCredentials([string(credentialsId: 'hetzner', variable: 'hcloud_token')]) {
            sh "cd terraform/hcloud-server-network && terraform init -var='hcloud_token=$hcloud_token'"
            sh "cd terraform/hcloud-server-network && terraform apply --auto-approve -var='hcloud_token=$hcloud_token' -var='network_id=$NETWORK_ID' -var='server_id=$SERVER_ID'"
            sh "cd terraform/hcloud-server-network && echo -n MANAGER_INTERNAL_IP= > manager_internal_ip.txt && terraform output internal_ip >> manager_internal_ip.txt"
        script {
            def manager_internal_ip = readProperties file: 'terraform/hcloud-server-network/manager_internal_ip.txt'
            env.MANAGER_INTERNAL_IP = manager_internal_ip.MANAGER_INTERNAL_IP
        }
        
          }
        }
            }
}

stage('Ansible Configure Manager VM') {
      
      steps {
        container('ansible') {
              git branch: "master",
              credentialsId: "github",
              url: "https://github.com/andycockers/gcp-automation"
              withCredentials([file(credentialsId: 'hetzner-ssh', variable: 'HETZNER')]) {
        sh """
        cd ansible
        echo $HETZNER > HETZNER
        sleep 20
        ansible-playbook -i $SERVER, --key-file HETZNER -u root configure-hpc-manager-centos.yml -e SUBNET_RANGE=$SUBNET_RANGE"
        """
      }
        }
            }
}

    stage('Terraform create HPC Worker nodes') {
      
      steps {
        container('terraform') {
              git branch: "master",
              credentialsId: "github",
              url: "https://github.com/andycockers/kubernetes"
              withCredentials([string(credentialsId: 'hetzner', variable: 'hcloud_token')]) {
            sh "cd terraform/hetzner-hpc-worker && terraform init -var='hcloud_token=$hcloud_token'"
            sh "cd terraform/hetzner-hpc-worker && terraform apply --auto-approve -var='hcloud_token=$hcloud_token'  -var='location=$LOCATION' -var='network_id=$NETWORK_ID' -var='server_type=$WORKER_TYPE' -var='type=type=$SNAPSHOT_TAG' -var='node_count=$WORKER_NODES'"
            sh "cd terraform/hetzner-hpc-worker && echo -n WORKER_IPS= > ipv4_address.txt && terraform output --json ipv4_address | jq --raw-output 'join(\",\")' >> ipv4_address.txt"
        script {
            def worker_ips = readProperties file: 'terraform/hetzner-hpc-worker/ipv4_address.txt'
            env.WORKER_IPS = worker_ips.WORKER_IPS
        }
        archiveArtifacts artifacts: 'terraform/hetzner-hpc-worker/ipv4_address.txt', followSymlinks: false
          }
        }
            }
    }

    stage('Ansible Configure Worker VM(s)') {
      
      steps {
        container('ansible') {
              git branch: "master",
              credentialsId: "github",
              url: "https://github.com/andycockers/gcp-automation"
              withCredentials([file(credentialsId: 'hetzner-ssh', variable: 'HETZNER')]) {
        sh "sleep 20"
        sh "cd ansible && ansible-playbook -i $WORKER_IPS, --key-file $HETZNER -u root configure-hpc-worker.yml -e MANAGER_IP=$MANAGER_INTERNAL_IP:/mnt/share"
      }
        }
            }
}

    
      }
      
  }

      
