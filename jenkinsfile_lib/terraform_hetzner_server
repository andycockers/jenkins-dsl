#!/usr/bin/env groovy

/* import shared library */
@Library('jenkins-dsl')_

pipeline {
  agent {
    label "worker" 
  }

  stages {
    stage('Terraform Create Server') {
      
      steps {
        container('worker') {
              git branch: "master",
              credentialsId: "github",
              url: "https://github.com/andycockers/kubernetes"
              withCredentials([file(credentialsId: 'jenkins-test-project', variable: 'GOOGLE_APPLICATION_CREDENTIALS'),string(credentialsId: 'hetzner', variable: 'hcloud_token')]) {
            sh "cd terraform/hetzner-server && terraform init -var='hcloud_token=$hcloud_token'"
            sh "cd terraform/hetzner-server && terraform plan -var='hcloud_token=$hcloud_token'"
            sh "cd terraform/hetzner-server && terraform apply --auto-approve -var='hcloud_token=$hcloud_token'"
            sh "cd terraform/hetzner-server && echo -n SERVER= > ipv4_address.txt && terraform output ipv4_address >> ipv4_address.txt"
            sh "cd terraform/hetzner-server && echo -n SERVER_NAME= > server_name.txt && terraform output -json server_name >> server_name.txt"
        script {
            def server = readProperties file: 'terraform/hetzner-server/ipv4_address.txt'
            env.SERVER = server.SERVER
        }
        script {
            def server_name = readProperties file: 'terraform/hetzner-server/server_name.txt'
            env.SERVER_NAME = server_name.SERVER_NAME
        }
        sh "echo $SERVER_NAME"
          }
        }
            }
}

    stage('Ansible Configure Server') {
      
      steps {
        container('worker') {
              git branch: "master",
              credentialsId: "github",
              url: "https://github.com/andycockers/gcp-automation"
              withCredentials([file(credentialsId: 'hetzner-ssh', variable: 'HETZNER'), string(credentialsId: 'ansible-vault', variable: 'VAULT')]) {
        sh "cd ansible && echo $VAULT > vault"
        sh "sleep 10"
        sh "cd ansible && ansible-playbook -i $SERVER, --key-file $HETZNER -u root install-swarm-client.yml --vault-password-file vault -e SERVER_NAME=$SERVER_NAME"
      }
        }
            }
}

      stage('Run a command on the new node'){
        steps{
          node(env.SERVER_NAME){
          sh "ls -la"
        }

        }
        
      }

    stage('Terraform destroy') {
      
      steps {
        container('worker') {
          git branch: "master",
              credentialsId: "github",
              url: "https://github.com/andycockers/kubernetes"
          withCredentials([file(credentialsId: 'jenkins-test-project', variable: 'GOOGLE_APPLICATION_CREDENTIALS'),string(credentialsId: 'hetzner', variable: 'hcloud_token')]) {
        sh "cd terraform/hetzner-server && terraform init -var='hcloud_token=$hcloud_token'"
        sh "cd terraform/hetzner-server && terraform destroy --auto-approve -var='hcloud_token=$hcloud_token'"
      }
        }
      }
    }

    stage('Delete node') {
      
      
        steps {
          container('worker') {
        withCredentials([string(credentialsId: 'pipeline_token', variable: 'TOKEN')]) {
        sh "curl http://192.168.0.22:32532/jnlpJars/jenkins-cli.jar --output jenkins-cli.jar"
        sh "java -jar jenkins-cli.jar -s http://192.168.0.22:32532:32504 -auth andy:$TOKEN offline-node $SERVER_NAME"
        sh "java -jar jenkins-cli.jar -s http://192.168.0.22:32532:32504 -auth andy:$TOKEN delete-node $SERVER_NAME"
        }
      
    }
        }
    }
      }
  }

      
